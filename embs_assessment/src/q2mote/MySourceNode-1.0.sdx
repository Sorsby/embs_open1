A!	MySourceNode-1.0.04058	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:004	q2.SourceNode	-1	0	c:000
r	prevReceptionPhase	l[]	0	0
r	fireQueue	c[]	0	1
r	sinkNodes	r:q2.SinkNodeModel[]	0	2
f	extendedListeningTime	z	0	0
f	finishListeningTime	l	0	1
f	nextFire	l	0	3
f	currentChannel	i	0	5
f	numChannels	i	0	6
G	DEFAULT_LISTENING_TIME	i	0	1750
m!	getCurrentChannel()i	-1	m:0149	00292	8	2
m!	getFireChannel()i	-1	m:014D	0029A	36	4
m!	getNextFireTime()l	-1	m:015F	002BE	30	3
m!	readBeacon(l,i)v	-1	m:01A2	00344	46	0
m!	registerNextFire(l)v	-1	m:01B9	00372	140	1
M!	SourceNode(r:q2.SourceNode,i)v	-1	m:0117	0022E	100
M	non_virt$changeChannel(r:q2.SourceNode,l)v	-1	m:016E	002DC	96
M	non_virt$getNumChannels(r:q2.SourceNode)i	-1	m:019E	0033C	8

C!	c:00A	q2.SinkNodeModel	1	1	c:000
f	correctN	z	1	0
f	correctT	z	1	1
f	bestT	l	1	2
f	bestN	i	1	4
f	prevTime	l	1	5
f	prevN	i	1	7
G	MAX_N	i	1	10
G!	MAX_T	i	1	1500
G!	MIN_N	i	1	2
G!	MIN_T	i	1	250
m!	calcNextBeacon(l)l	1	m:003C	00078	58	5
m!	calcNextRxPhase(l)l	1	m:0059	000B2	108	3
m!	hasN()z	1	m:008F	0011E	8	1
m!	hasT()z	1	m:0093	00126	8	2
m!	readBeacon(l,i)v	1	m:00CA	00194	138	0
m!	totalProtocolLength()l	1	m:010F	0021E	16	4
M!	SinkNodeModel(r:q2.SinkNodeModel)v	1	m:002A	00054	36
M	non_virt$calcN(r:q2.SinkNodeModel,l,i)v	1	m:0097	0012E	38
M	non_virt$calcTForNEqual1(r:q2.SinkNodeModel,l)v	1	m:00AA	00154	52
M	non_virt$nextRxPhaseStart(r:q2.SinkNodeModel,l,l)l	1	m:00C4	00188	12

C!	c:011	q2mote.MySourceNode	2	2	c:000
R	sourceNode	r:q2.SourceNode	2	0
R	radio	r:com.ibm.saguaro.system.Radio	2	1
R	timer	r:com.ibm.saguaro.system.Timer	2	2
R	xmit	c[]	2	3
F	rxEnabled	z	2	0
G	GREEN_LED	c	2	1
G	MOTE_PAYLOAD	c	2	17
G	NUM_CHANNELS	i	2	3
G	PAN_ID_OFFSET	i	2	17
G	RED_LED	c	2	2
G	SOURCE_NODE_SHORT_ADDR	i	2	66
G	YELLOW_LED	c	2	0
M!	MySourceNode(r:q2mote.MySourceNode)v	2	m:0247	0048E	4
M	access$000(c,l)v	2	m:0249	00492	10
M	access$100(i,c[],i,i,l)i	2	m:024E	0049C	14
M	access$200(i,c[],i,i,l)i	2	m:0255	004AA	14
M	fireSourceNode()v	2	m:025C	004B8	142
M	readBeacon(i,c[],i,i,l)i	2	m:02A3	00546	60
M	switchChannel(i)v	2	m:02C1	00582	68
M	timerCb(c,l)v	2	m:02E3	005C6	18
M	transmissionCb(i,c[],i,i,l)i	2	m:02EC	005D8	8

C	c:013	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	q2mote.MySourceNode.sourceNode	r:q2.SourceNode	-1	0
r	RADIO	r:com.ibm.saguaro.system.Radio	-1	1
r	TIMER	r:com.ibm.saguaro.system.Timer	-1	2
r	XMIT	c[]	-1	3
f	q2mote.MySourceNode.rxEnabled	z	-1	0
M	__init()v	-1	m:01FF	003FE	144

c	00057	1	48	0	48	0	m:002A
l!	00057	00078	r:q2.SinkNodeModel	this	m:002A	0
c	0005B	1	49	0	49	0	m:002A
c	00063	1	50	0	50	0	m:002A
c	00067	1	51	0	51	0	m:002A
c	0006F	1	52	0	52	0	m:002A
c	00073	1	53	0	53	0	m:002A
c	00077	1	54	0	54	0	m:002A
e!	00078	m:002A
c	0007B	1	171	0	171	0	m:003C
l!	0007B	000B1	r:q2.SinkNodeModel	this	m:003C	0
l	0007B	000B1	l	time	m:003C	1
c	00085	1	172	0	172	0	m:003C
c	0008B	1	174	0	174	0	m:003C
c	00090	1	175	0	175	0	m:003C
c	00092	1	177	0	177	0	m:003C
c	000A8	1	178	0	178	0	m:003C
l	000A8	000B1	l	nextBeacon	m:003C	3
c	000AD	1	179	0	179	0	m:003C
c	000AF	1	181	0	181	0	m:003C
e!	000B2	m:003C
c	000B5	1	141	0	141	0	m:0059
l!	000B5	0011D	r:q2.SinkNodeModel	this	m:0059	0
l	000B5	0011D	l	time	m:0059	1
c	000BB	1	143	0	143	0	m:0059
l	000BB	0011D	l	rxPhaseTime	m:0059	3
c	000CB	1	144	0	144	0	m:0059
c	000DF	1	145	0	145	0	m:0059
l	000DF	0011B	l	currentPhase	m:0059	5
c	000EA	1	146	0	146	0	m:0059
l	000EA	0011B	l	phaseLength	m:0059	7
c	000F7	1	148	0	148	0	m:0059
l	000F7	0011B	l	protocolLength	m:0059	9
c	00100	1	149	0	149	0	m:0059
c	00105	1	150	0	150	0	m:0059
c	0010A	1	151	0	151	0	m:0059
c	0011B	1	154	0	154	0	m:0059
e!	0011E	m:0059
c	00121	1	122	0	122	0	m:008F
l	00121	00125	r:q2.SinkNodeModel	this	m:008F	0
e!	00126	m:008F
c	00129	1	126	0	126	0	m:0093
l	00129	0012D	r:q2.SinkNodeModel	this	m:0093	0
e!	0012E	m:0093
c	00131	1	103	0	103	0	m:0097
l	00131	00154	r:q2.SinkNodeModel	this	m:0097	0
l	00131	00154	l	timeGap	m:0097	1
l	00131	00154	i	nDiff	m:0097	3
c	0013A	1	105	0	105	0	m:0097
l	0013A	00154	i	beaconDiff	m:0097	4
c	00148	1	106	0	106	0	m:0097
c	0014F	1	107	0	107	0	m:0097
c	00153	1	109	0	109	0	m:0097
e	00154	m:0097
c	00157	1	116	0	116	0	m:00AA
l	00157	00188	r:q2.SinkNodeModel	this	m:00AA	0
l	00157	00188	l	timeGap	m:00AA	1
c	0015F	1	117	0	117	0	m:00AA
l	0015F	00188	l	t	m:00AA	3
c	00183	1	118	0	118	0	m:00AA
c	00187	1	119	0	119	0	m:00AA
e	00188	m:00AA
c	0018B	1	137	0	137	0	m:00C4
l	0018B	00193	r:q2.SinkNodeModel	this	m:00C4	0
l	0018B	00193	l	protocolLength	m:00C4	1
l	0018B	00193	l	n	m:00C4	3
e	00194	m:00C4
c	00197	1	62	0	62	0	m:00CA
l!	00197	0021D	r:q2.SinkNodeModel	this	m:00CA	0
l!	00197	0021D	l	time	m:00CA	1
l	00197	0021D	i	n	m:00CA	3
c	0019E	1	64	0	64	0	m:00CA
l	0019E	0021D	l	timeGap	m:00CA	4
c	001A4	1	65	0	65	0	m:00CA
c	001A8	1	68	0	68	0	m:00CA
c	001AE	1	70	0	70	0	m:00CA
l	001AE	0021D	i	nDiff	m:00CA	6
c	001BD	1	72	0	72	0	m:00CA
c	001C7	1	74	0	74	0	m:00CA
l	001C7	00214	i	minProtocolLength	m:00CA	7
c	001D1	1	75	0	75	0	m:00CA
c	001D9	1	76	0	76	0	m:00CA
c	001DF	1	77	0	77	0	m:00CA
c	001E4	1	79	0	79	0	m:00CA
c	001F2	1	80	0	80	0	m:00CA
c	001FC	1	82	0	82	0	m:00CA
c	00202	1	83	0	83	0	m:00CA
c	00208	1	88	0	88	0	m:00CA
c	0020D	1	89	0	89	0	m:00CA
c	00214	1	92	0	92	0	m:00CA
c	00218	1	93	0	93	0	m:00CA
c	0021C	1	94	0	94	0	m:00CA
e!	0021E	m:00CA
c	00221	1	158	0	158	0	m:010F
l	00221	0022D	r:q2.SinkNodeModel	this	m:010F	0
e!	0022E	m:010F
c	00231	0	30	0	30	0	m:0117
l!	00231	00291	r:q2.SourceNode	this	m:0117	0
l!	00231	00291	i	numChannels	m:0117	1
c	00235	0	31	0	31	0	m:0117
c	0023C	0	33	0	33	0	m:0117
l	0023E	00253	i	i	m:0117	2
c	00242	0	34	0	34	0	m:0117
c	0024E	0	33	0	33	0	m:0117
c	00253	0	36	0	36	0	m:0117
c	00258	0	37	0	37	0	m:0117
c	0025D	0	39	0	39	0	m:0117
l	0025F	00278	i	i	m:0117	2
c	00263	0	40	0	40	0	m:0117
c	00269	0	41	0	41	0	m:0117
c	00273	0	39	0	39	0	m:0117
c	00278	0	44	0	44	0	m:0117
c	0027C	0	45	0	45	0	m:0117
c	00284	0	46	0	46	0	m:0117
c	0028C	0	47	0	47	0	m:0117
c	00290	0	48	0	48	0	m:0117
e!	00292	m:0117
c	00295	0	138	0	138	0	m:0149
l	00295	00299	r:q2.SourceNode	this	m:0149	0
e!	0029A	m:0149
c	0029D	0	154	0	154	0	m:014D
l	0029D	002BD	r:q2.SourceNode	this	m:014D	0
l	0029F	002BB	i	i	m:014D	1
c	002A6	0	156	0	156	0	m:014D
c	002AE	0	157	0	157	0	m:014D
c	002B4	0	158	0	158	0	m:014D
c	002B6	0	154	0	154	0	m:014D
c	002BB	0	161	0	161	0	m:014D
e!	002BE	m:014D
c	002C1	0	142	0	142	0	m:015F
l	002C1	002DB	r:q2.SourceNode	this	m:015F	0
c	002C5	0	143	0	143	0	m:015F
l	002C5	002DB	l	next	m:015F	1
c	002D5	0	144	0	144	0	m:015F
c	002D9	0	146	0	146	0	m:015F
e!	002DC	m:015F
c	002DF	0	112	0	112	0	m:016E
l	002DF	0033C	r:q2.SourceNode	this	m:016E	0
l	002DF	0033C	l	time	m:016E	1
c	002E5	0	113	0	113	0	m:016E
l	002E5	0033C	i	channel	m:016E	3
c	002E9	0	115	0	115	0	m:016E
l	002EB	0032D	i	i	m:016E	4
c	002F2	0	116	0	116	0	m:016E
c	002FB	0	119	0	119	0	m:016E
l	002FB	00328	i	nextChannel	m:016E	5
c	0030F	0	120	0	120	0	m:016E
c	00313	0	124	0	124	0	m:016E
c	00326	0	125	0	125	0	m:016E
c	00328	0	115	0	115	0	m:016E
c	0032D	0	129	0	129	0	m:016E
c	00337	0	130	0	130	0	m:016E
c	0033B	0	131	0	131	0	m:016E
e	0033C	m:016E
c	0033F	0	134	0	134	0	m:019E
l	0033F	00343	r:q2.SourceNode	this	m:019E	0
e	00344	m:019E
c	00347	0	59	0	59	0	m:01A2
l!	00347	00372	r:q2.SourceNode	this	m:01A2	0
l!	00347	00372	l	time	m:01A2	1
l	00347	00372	i	n	m:01A2	3
c	00353	0	60	0	60	0	m:01A2
c	0035C	0	61	0	61	0	m:01A2
c	00366	0	62	0	62	0	m:01A2
c	0036C	0	64	0	64	0	m:01A2
c	00371	0	66	0	66	0	m:01A2
e!	00372	m:01A2
c	00375	0	74	0	74	0	m:01B9
l!	00375	003FD	r:q2.SourceNode	this	m:01B9	0
l	00375	003FD	l	time	m:01B9	1
c	0037D	0	76	0	76	0	m:01B9
l	0037F	003F0	i	i	m:01B9	3
c	00386	0	77	0	77	0	m:01B9
c	00391	0	79	0	79	0	m:01B9
l	00391	003EB	l	fireTime	m:01B9	4
c	0039B	0	80	0	80	0	m:01B9
c	003A1	0	82	0	82	0	m:01B9
c	003AB	0	83	0	83	0	m:01B9
c	003B1	0	84	0	84	0	m:01B9
c	003B8	0	87	0	87	0	m:01B9
c	003C2	0	88	0	88	0	m:01B9
l	003C2	003D3	l	length	m:01B9	6
c	003CC	0	89	0	89	0	m:01B9
c	003D3	0	95	0	95	0	m:01B9
c	003E6	0	96	0	96	0	m:01B9
c	003EB	0	76	0	76	0	m:01B9
c	003F0	0	102	0	102	0	m:01B9
c	003F7	0	103	0	103	0	m:01B9
c	003FC	0	104	0	104	0	m:01B9
e!	003FE	m:01B9
c	0040B	2	24	0	24	0	m:01FF
c	00416	2	41	0	41	0	m:01FF
c	00420	2	42	0	42	0	m:01FF
c	0042A	2	47	0	47	0	m:01FF
c	00430	2	56	0	56	0	m:01FF
c	0043C	2	59	0	59	0	m:01FF
c	00446	2	67	0	67	0	m:01FF
c	00450	2	75	0	75	0	m:01FF
c	0045A	2	83	0	83	0	m:01FF
c	00460	2	84	0	84	0	m:01FF
c	00468	2	85	0	85	0	m:01FF
c	00473	2	86	0	86	0	m:01FF
c	0047B	2	89	0	89	0	m:01FF
c	00484	2	91	0	91	0	m:01FF
c	00487	2	94	0	94	0	m:01FF
c	0048C	2	95	0	95	0	m:01FF
e	0048E	m:01FF
c	00491	2	10	0	10	0	m:0247
l!	00491	00492	r:q2mote.MySourceNode	this	m:0247	0
e!	00492	m:0247
c	00495	2	10	0	10	0	m:0249
l	00495	0049B	c	x0	m:0249	0
l	00495	0049B	l	x1	m:0249	1
e	0049C	m:0249
c	0049F	2	10	0	10	0	m:024E
l	0049F	004A9	i	x0	m:024E	0
l	0049F	004A9	c[]	x1	m:024E	1
l	0049F	004A9	i	x2	m:024E	2
l	0049F	004A9	i	x3	m:024E	3
l	0049F	004A9	l	x4	m:024E	4
e	004AA	m:024E
c	004AD	2	10	0	10	0	m:0255
l	004AD	004B7	i	x0	m:0255	0
l	004AD	004B7	c[]	x1	m:0255	1
l	004AD	004B7	i	x2	m:0255	2
l	004AD	004B7	i	x3	m:0255	3
l	004AD	004B7	l	x4	m:0255	4
e	004B8	m:0255
c	004BB	2	125	0	125	0	m:025C
c	004C1	2	127	0	127	0	m:025C
c	004C8	2	128	0	128	0	m:025C
l	004C8	00545	l	nextFireTime	m:025C	0
c	004D1	2	129	0	129	0	m:025C
c	004DC	2	131	0	131	0	m:025C
c	004E3	2	133	0	133	0	m:025C
l	004E3	00545	i	sendChannel	m:025C	2
c	004E7	2	134	0	134	0	m:025C
c	004EB	2	135	0	135	0	m:025C
c	00501	2	136	0	136	0	m:025C
c	0050E	2	139	0	139	0	m:025C
c	00515	2	141	0	141	0	m:025C
l	00515	00544	i	readChannel	m:025C	3
c	00519	2	142	0	142	0	m:025C
c	0051D	2	143	0	143	0	m:025C
c	0052F	2	144	0	144	0	m:025C
c	00535	2	145	0	145	0	m:025C
c	0053A	2	146	0	146	0	m:025C
c	00540	2	147	0	147	0	m:025C
c	00544	2	150	0	150	0	m:025C
e	00546	m:025C
c	00549	2	108	0	108	0	m:02A3
l	00549	00581	i	flags	m:02A3	0
l	00549	00581	c[]	data	m:02A3	1
l	00549	00581	i	len	m:02A3	2
l	00549	00581	i	info	m:02A3	3
l	00549	00581	l	time	m:02A3	4
c	0054C	2	109	0	109	0	m:02A3
c	00552	2	110	0	110	0	m:02A3
l	00552	00576	l	fireTime	m:02A3	6
c	00559	2	112	0	112	0	m:02A3
l	00559	00576	i	n	m:02A3	8
c	00563	2	113	0	113	0	m:02A3
c	0056E	2	115	0	115	0	m:02A3
c	00576	2	116	0	116	0	m:02A3
c	00578	2	117	0	117	0	m:02A3
c	0057C	2	120	0	120	0	m:02A3
c	0057F	2	121	0	121	0	m:02A3
e	00582	m:02A3
c	00585	2	153	0	153	0	m:02C1
l	00585	005C5	i	channel	m:02C1	0
c	0058C	2	155	0	155	0	m:02C1
c	00598	2	156	0	156	0	m:02C1
c	005A4	2	157	0	157	0	m:02C1
c	005B1	2	159	0	159	0	m:02C1
c	005B9	2	160	0	160	0	m:02C1
c	005C4	2	161	0	161	0	m:02C1
e	005C6	m:02C1
c	005C9	2	103	0	103	0	m:02E3
l	005C9	005D7	c	param	m:02E3	0
l	005C9	005D7	l	time	m:02E3	1
c	005D3	2	104	0	104	0	m:02E3
c	005D6	2	105	0	105	0	m:02E3
e	005D8	m:02E3
c	005DB	2	98	0	98	0	m:02EC
l	005DB	005E0	i	flags	m:02EC	0
l	005DB	005E0	c[]	data	m:02EC	1
l	005DB	005E0	i	len	m:02EC	2
l	005DB	005E0	i	info	m:02EC	3
l	005DB	005E0	l	time	m:02EC	4
c	005DE	2	99	0	99	0	m:02EC
e	005E0	m:02EC
S	C:/Users/Matthew/eclipse-workspace/embs_assessment/src/q2/SourceNode.java
:	package q2;
:	
:	/**
:	 * This class represents the logic of the source node, when to fire and to which channel etc.
:	 */
:	public class SourceNode {
:	
:	    /**
:	     * A constant defining how long we listen on a particular channel before switched to another.
:	     */
:	    private static final int DEFAULT_LISTENING_TIME =
:	            SinkNodeModel.MAX_T + SinkNodeModel.MIN_T;
:	
:	    /**
:	     * Stores instances of SourceNodeModel which contain the parameters and relevant information for sink nodes.
:	     */
:	    private final SinkNodeModel[] sinkNodes;
:	
:	    private final byte[] fireQueue;
:	    private final long[] prevReceptionPhase;
:	
:	    private int numChannels;
:	
:	    private int currentChannel;
:	    private long nextFire;
:	    private long finishListeningTime;
:	    private boolean extendedListeningTime;
:	
:	    public SourceNode(int numChannels) {
:	        this.numChannels = numChannels;
:	        this.sinkNodes = new SinkNodeModel[numChannels];
:	
:	        for (int i = 0; i < numChannels; i++)
:	            this.sinkNodes[i] = new SinkNodeModel();
:	
:	        this.fireQueue = new byte[numChannels];
:	        this.prevReceptionPhase = new long[numChannels];
:	
:	        for (int i = 0; i < numChannels; i++) {
:	            fireQueue[i] = 0;
:	            prevReceptionPhase[i] = 0;
:	        }
:	
:	        currentChannel = 0;
:	        nextFire = -1;
:	        finishListeningTime = DEFAULT_LISTENING_TIME;
:	        extendedListeningTime = false;
:	    }
:	
:	    /**
:	     * Reads a beacon value on the current channel and forwards it to the SinkNodeModel.
:	     * Extends the time on the current channel if the beacon is valid and we haven't already extended the read time.
:	     * <p>
:	     * Changes channel if we have used all the allocated time for this channel at the moment.
:	     * @param time the time which the beacon was read.
:	     * @param n the payload of the beacon.
:	     */
:	    public void readBeacon(long time, int n) {
:	        sinkNodes[currentChannel].readBeacon(time, n);
:	        if (n != 1 && !extendedListeningTime) {
:	            finishListeningTime = time + SinkNodeModel.MAX_T;
:	            extendedListeningTime = true;
:	        } else {
:	            changeChannel(time);
:	        }
:	    }
:	
:	    /**
:	     * Determines the times at which we next fire the actor on each channel.
:	     * If we can calculate the RX phase for a sink node we queue a fire time.
:	     * @param time the current time.
:	     */
:	    public void registerNextFire(long time) {
:	        nextFire = -1;
:	
:	        for (int i = 0; i < getNumChannels(); i++) {
:	            long fireTime = sinkNodes[i].calcNextRxPhase(time);
:	
:	            if (fireTime > 0) {
:	                if (fireTime <= time) {
:	                    //queue new fire time for node rx phase
:	                    if (fireTime != prevReceptionPhase[i]) {
:	                        fireQueue[i] = 1;
:	                        prevReceptionPhase[i] = fireTime;
:	                    }
:	
:	                    long length = sinkNodes[i].totalProtocolLength();
:	                    if (length != 0) {
:	                        fireTime += length;
:	                    } else {
:	                        continue;
:	                    }
:	                }
:	
:	                if (nextFire == -1 || fireTime < nextFire) {
:	                    nextFire = fireTime;
:	                }
:	            }
:	        }
:	
:	        //change channel after the default listening period
:	        if (time >= finishListeningTime)
:	            changeChannel(time);
:	    }
:	
:	    /**
:	     * Cycles through the defined channels looking for an appropriate one to read.
:	     * Sets the value of current channel to this appropriate channel.
:	     * @param time the current time.
:	     */
:	    private void changeChannel(long time) {
:	        int channel = currentChannel + 1;
:	        currentChannel = -1;
:	
:	        for (int i = 0; i < getNumChannels(); i++) {
:	            int nextChannel = (channel + i) % getNumChannels();
:	
:	            //if we don't know the parameters for a sink it is clearly of interest to us.
:	            if (!sinkNodes[nextChannel].hasT() || !sinkNodes[nextChannel].hasN()) {
:	                currentChannel = nextChannel;
:	
:	                //if the channel in question is going to fire a beacon before the default listening time is up,
:	                // we can switch to this channel and break the search loop.
:	                if (sinkNodes[nextChannel].calcNextBeacon(time) < time + DEFAULT_LISTENING_TIME)
:	                    break;
:	            }
:	        }
:	
:	        finishListeningTime = time + DEFAULT_LISTENING_TIME;
:	        extendedListeningTime = false;
:	    }
:	
:	    private int getNumChannels() {
:	        return this.numChannels;
:	    }
:	
:	    public int getCurrentChannel() {
:	        return this.currentChannel;
:	    }
:	
:	    public long getNextFireTime() {
:	        long next = nextFire;
:	        if (next == -1 || finishListeningTime < next) {
:	            next = finishListeningTime;
:	        }
:	        return next;
:	    }
:	
:	    /**
:	     * Determine which channel to fire from the queue of things to fire.
:	     * @return int Channel id to fire
:	     */
:	    public int getFireChannel() {
:	        for (int i = 0; i < getNumChannels(); i++) {
:	            //if the channel is waiting to be fired, return the channel id and zero the entry in the fireQueue array.
:	            if (fireQueue[i] != 0) {
:	                fireQueue[i] = 0;
:	                return i;
:	            }
:	        }
:	        return -1;
:	    }
:	}
S	C:/Users/Matthew/eclipse-workspace/embs_assessment/src/q2/SinkNodeModel.java
:	package q2;
:	
:	/**
:	 * This class handles computing the sink node parameters given sequences of beacons.
:	 * It then uses the parameters to calculate the respective reception phases on each firing of the node.
:	 */
:	public class SinkNodeModel {
:	
:	    /**
:	     * Constants defining the parameters of the sink nodes as defined in the assessment brief.
:	     */
:	    public static final int MAX_T = 1500;
:	    public static final int MIN_T = 250;
:	    public static final int MIN_N = 2;
:	    private static final int MAX_N = 10;
:	
:	    /**
:	     * The previous read beacon value for the sink node.
:	     */
:	    private int prevN;
:	
:	    /**
:	     * The previous time a beacon was read.
:	     */
:	    private long prevTime;
:	
:	    /**
:	     * The current best value for n.
:	     */
:	    private int bestN;
:	
:	    /**
:	     * The current best value for t.
:	     */
:	    private long bestT;
:	
:	    /**
:	     * If true we have the correct value for t.
:	     */
:	    private boolean correctT;
:	
:	    /**
:	     * If true we have the correct value for n.
:	     */
:	    private boolean correctN;
:	
:	    public SinkNodeModel() {
:	        prevN = 0;
:	        prevTime = 0;
:	        bestN = 1;
:	        bestT = 0;
:	        correctN = false;
:	        correctT = false;
:	    }
:	
:	    /**
:	     * Read a beacon payload at a certain time and use those values to determine the sink node parameters.
:	     * @param time the time at which the beacon was read.
:	     * @param n the beacon payload.
:	     */
:	    public void readBeacon(long time, int n) {
:	        long timeGap = time - prevTime;
:	
:	        if (n > bestN) {
:	            bestN = n;
:	        }
:	
:	        int nDiff = prevN - n;
:	        //if the previous n is not 0 and timeGap is > 0 then we have enough information to compute some parameters.
:	        if (prevN != 0 && timeGap > 0) {
:	
:	            int minProtocolLength = (11 + bestN) * MIN_T;
:	            //if the beacons are in descending order of value and have arrived in the same protocol iteration, we can determine t.
:	            if (nDiff > 0 && timeGap < minProtocolLength) {
:	                bestT = timeGap / nDiff;
:	                correctT = true;
:	            } else if (!correctT) {
:	
:	                if (nDiff > 0 && timeGap < nDiff * MAX_T) {
:	                    bestT = timeGap / nDiff;
:	                    //special case for n=1
:	                } else if (bestN == 1) {
:	                    calcTForNEqual1(timeGap);
:	                }
:	            }
:	
:	            //when we know t we can work out n
:	            if (correctT) {
:	                calcN(timeGap, nDiff);
:	            }
:	        }
:	        prevN = n;
:	        prevTime = time;
:	    }
:	
:	
:	    /**
:	     * Calculate n using the difference of beacon values between two different protocol iterations.
:	     * @param timeGap the time gap between beacon reads.
:	     * @param nDiff the difference in beacon value.
:	     */
:	    private void calcN(long timeGap, int nDiff) {
:	        int beaconDiff = (int)(timeGap / bestT) - nDiff;
:	
:	        if (11 + bestN <= beaconDiff && beaconDiff <= 11 + MAX_N) {
:	            bestN = beaconDiff - 11;
:	            correctN = true;
:	        }
:	    }
:	
:	    /**
:	     * Calculate t when n=1 by dividing the time gap by 12
:	     * @param timeGap the time between the current beacon being read and the prevTime.
:	     */
:	    private void calcTForNEqual1(long timeGap) {
:	        long t = timeGap / 12;
:	        if ((bestT == 0 || t < bestT) && (t > MIN_T && t < MAX_T))
:	            bestT = t;
:	    }
:	
:	    public boolean hasN() {
:	        return correctN;
:	    }
:	
:	    public boolean hasT() {
:	        return correctT;
:	    }
:	
:	    /**
:	     * Determine whether the RX phase is happening now or has already happened.
:	     * If already happened and we know the value of n, we can compute the next RX phase immediately.
:	     * @param protocolLength the length of an iteration of the protocol.
:	     * @param n the time of the last RX phase.
:	     * @return the start of the next RX phase.
:	     */
:	    private long nextRxPhaseStart(long protocolLength, long n) {
:	        return (n + protocolLength) / protocolLength * protocolLength;
:	    }
:	
:	    public long calcNextRxPhase(long time) {
:	        long rxPhaseTime = 0;
:	
:	        if (prevN != 0 && bestT != 0) {
:	            long currentPhase = prevTime + prevN * bestT + 20;
:	            long phaseLength = bestT - 20;
:	            long protocolLength = (11 + bestN) * bestT;
:	
:	            if (currentPhase + phaseLength > time) {
:	                rxPhaseTime = currentPhase;
:	            } else if (correctN) {
:	                rxPhaseTime = currentPhase + nextRxPhaseStart(protocolLength, (time - currentPhase - phaseLength));
:	            }
:	        }
:	        return rxPhaseTime;
:	    }
:	
:	    public long totalProtocolLength() {
:	        return (11 + bestN) * bestT;
:	    }
:	
:	    /**
:	     * This method is used when selecting which channel to switch to.
:	     * <p>
:	     * If we can calculate when the next beacon is to arrive as a minimum,
:	     * we can switch to that channel with high confidence it will produce a beacon soon.
:	     * @param time current time.
:	     * @return an integer representing either the current time or the time a beacon could arrive as a minimum.
:	     */
:	    public long calcNextBeacon(long time) {
:	        //if we know the params we don't need another beacon
:	        if (correctN && correctT)
:	            return 0;
:	
:	        if (!correctT)
:	            return time;
:	
:	        long nextBeacon = prevTime + (11 + prevN) * bestT - 500;
:	        if (time >= nextBeacon)
:	            return time;
:	
:	        return nextBeacon;
:	    }
:	}
S	C:\Users\Matthew\eclipse-workspace\embs_assessment\src\q2mote\MySourceNode.java
:	package q2mote;
:	
:	import com.ibm.saguaro.system.*;
:	import q2.SourceNode;
:	
:	/**
:	 * Implementation of a source node using the same logic as the ptolemy source node,
:	 * except applied to the IRIS Motes as seen in labs.
:	 */
:	public final class MySourceNode {
:	    private static final byte YELLOW_LED = (byte) 0;
:	    private static final byte GREEN_LED = (byte) 1;
:	    private static final byte RED_LED = (byte) 2;
:	
:	    /**
:	     * Channel count.
:	     */
:	    private static final int NUM_CHANNELS = 3;
:	
:	    /**
:	     * Instance of SourceNode, created for Ptolemy task but reused here with different channels and params.
:	     * For mote remember to change MIN_T and MIN_N.
:	     */
:	    private static final SourceNode sourceNode = new SourceNode(NUM_CHANNELS);
:	
:	    /**
:	     * Constant arbitrary payload to transmit
:	     */
:	    private static final byte MOTE_PAYLOAD = 0x11;
:	
:	    /**
:	     * Number to add to the channel id to get the PAN id
:	     */
:	    private static final int PAN_ID_OFFSET = 0x11;
:	
:	    /**
:	     * The short address of this source node
:	     */
:	    private static final int SOURCE_NODE_SHORT_ADDR = 0x42;
:	
:	    private static final Radio radio = new Radio();
:	    private static final Timer timer = new Timer();
:	
:	    /**
:	     * Transmit buffer
:	     */
:	    private static final byte[] xmit = new byte[12];
:	
:	    /**
:	     * Currently receiving if true.
:	     */
:	    private static boolean rxEnabled;
:	
:	    //static constructor to init the mote source node.
:	    static {
:	        radio.open(Radio.DID, null, 0, 0);
:	
:	        //set callback for the timer for reading beacons and firings.
:	        timer.setCallback(new TimerEvent(null) {
:	            @Override
:	            public void invoke(byte param, long time) {
:	                timerCb(param, time);
:	            }
:	        });
:	
:	        //set callback for the reception phase on the radio.
:	        radio.setRxHandler(new DevCallback(null) {
:	            @Override
:	            public int invoke(int flags, byte[] data, int len, int info, long time) {
:	                return readBeacon(flags, data, len, info, time);
:	            }
:	        });
:	
:	        //set callback for the transmission phase on the radio.
:	        radio.setTxHandler(new DevCallback(null) {
:	            @Override
:	            public int invoke(int flags, byte[] data, int len, int info, long time) {
:	                return transmissionCb(flags, data, len, info, time);
:	            }
:	        });
:	
:	        //radio setup
:	        xmit[0] = Radio.FCF_DATA;
:	        xmit[1] = Radio.FCA_SRC_SADDR | Radio.FCA_DST_SADDR;
:	        Util.set16le(xmit, 9, SOURCE_NODE_SHORT_ADDR);
:	        xmit[11] = MOTE_PAYLOAD;
:	
:	        //switch to an initial channel
:	        switchChannel(sourceNode.getCurrentChannel());
:	        //initial firing
:	        fireSourceNode();
:	
:	        //turn on yellow led to indicate the source node is enabled.
:	        LED.setState(YELLOW_LED, (byte)1);
:	    }
:	
:	    private static int transmissionCb(int flags, byte[] data, int len, int info, long time) {
:	        fireSourceNode();
:	        return 0;
:	    }
:	
:	    private static void timerCb(byte param, long time) {
:	        sourceNode.registerNextFire(Time.currentTime(Time.MILLISECS));
:	        fireSourceNode();
:	    }
:	
:	    private static int readBeacon(int flags, byte[] data, int len, int info, long time) {
:	        if (data != null) {
:	            long fireTime = Time.currentTime(Time.MILLISECS);
:	            int n = data[11];
:	
:	            sourceNode.readBeacon(fireTime, n);
:	            LED.setState(GREEN_LED, (byte) (1 - LED.getState(GREEN_LED)));
:	
:	            sourceNode.registerNextFire(fireTime);
:	        } else {
:	            rxEnabled = false;
:	        }
:	
:	        fireSourceNode();
:	        return 0;
:	    }
:	
:	    private static void fireSourceNode() {
:	        timer.cancelAlarm();
:	
:	        long nextFireTime = sourceNode.getNextFireTime();
:	        if (nextFireTime > 0)
:	            timer.setAlarmTime(Time.toTickSpan(Time.MILLISECS, nextFireTime));
:	
:	        int sendChannel = sourceNode.getFireChannel();
:	
:	        if (sendChannel != -1) {
:	            switchChannel(sendChannel);
:	            radio.transmit(Device.ASAP | Radio.TXMODE_POWER_MAX | Radio.TXMODE_CCA, xmit, 0, xmit.length, 0);
:	            LED.setState(RED_LED, (byte) (1 - LED.getState(RED_LED)));
:	
:	        } else {
:	            int readChannel = sourceNode.getCurrentChannel();
:	
:	            if (readChannel != -1) {
:	                switchChannel(readChannel);
:	                radio.startRx(Device.ASAP | Device.RX4EVER, 0, 0);
:	                rxEnabled = true;
:	            } else if (rxEnabled) {
:	                radio.stopRx();
:	                rxEnabled = false;
:	            }
:	        }
:	    }
:	
:	    private static void switchChannel(int channel) {
:	        radio.setState(Device.S_OFF);
:	
:	        Util.set16le(xmit, 3, PAN_ID_OFFSET + channel);
:	        Util.set16le(xmit, 5, PAN_ID_OFFSET + channel);
:	        Util.set16le(xmit, 7, PAN_ID_OFFSET + channel);
:	
:	        radio.setChannel((byte) channel);
:	        radio.setPanId(PAN_ID_OFFSET + channel, true);
:	    }
:	}
